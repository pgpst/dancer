import { xor } from '../src/crypto';

const testData = [
	{
		left: new Buffer([
			0xc5, 0x91, 0x7a, 0x26, 0xbc, 0xd7,
			0x8c, 0x3b, 0xaa, 0x80, 0x43, 0x2c,
			0x72, 0x43, 0x1a, 0xe6, 0x63, 0x53,
			0xcf, 0x5b, 0xc7, 0x02, 0xc4, 0xcd,
			0xfb, 0x35, 0xf7, 0x4f, 0x36, 0x8a,
			0x5f, 0x9d,
		]),
		right: new Buffer([
			0xc0, 0x67, 0xe0, 0x8f, 0xe6, 0x93,
			0x7c, 0x76, 0x0d, 0x5a, 0xa5, 0xe8,
			0xbf, 0xf7, 0xdf, 0x94, 0x72, 0x82,
			0x99, 0xf6, 0x61, 0xf3, 0x0d, 0x46,
			0x83, 0xb6, 0x19, 0x8c, 0x0b, 0x2d,
			0xfe, 0xe2,
		]),
		result: new Buffer([
			0x05, 0xf6, 0x9a, 0xa9, 0x5a, 0x44,
			0xf0, 0x4d, 0xa7, 0xda, 0xe6, 0xc4,
			0xcd, 0xb4, 0xc5, 0x72, 0x11, 0xd1,
			0x56, 0xad, 0xa6, 0xf1, 0xc9, 0x8b,
			0x78, 0x83, 0xee, 0xc3, 0x3d, 0xa7,
			0xa1, 0x7f,
		])
	},
	{
		left: new Buffer([
			0x21, 0x67, 0x12, 0x9e, 0x14, 0x62,
			0x5a, 0x16, 0x3e, 0x9e, 0x54, 0x1d,
			0xf7, 0x1a, 0xcd, 0x1c, 0x67, 0xf1,
			0x6a, 0xe5, 0x7e, 0x25, 0xf6, 0x97,
			0xbc, 0x87, 0xd8, 0x3b, 0x3b, 0x79,
			0x0d, 0xc7,
		]),
		right: new Buffer([
			0xb2, 0xee, 0xa5, 0xdd, 0x80, 0xbc,
			0xc3, 0x45, 0x88, 0x17, 0xac, 0xdd,
			0xbd, 0x9a, 0x98, 0x5f, 0x42, 0x48,
			0x72, 0x23, 0xa1, 0x44, 0x8e, 0x9c,
			0x93, 0xb0, 0xd6, 0x9b, 0x61, 0xf1,
			0x5b, 0xa5,
		]),
		result: new Buffer([
			0x93, 0x89, 0xb7, 0x43, 0x94, 0xde,
			0x99, 0x53, 0xb6, 0x89, 0xf8, 0xc0,
			0x4a, 0x80, 0x55, 0x43, 0x25, 0xb9,
			0x18, 0xc6, 0xdf, 0x61, 0x78, 0x0b,
			0x2f, 0x37, 0x0e, 0xa0, 0x5a, 0x88,
			0x56, 0x62,
		])
	},
	{
		left: new Buffer([
			0xd7, 0xac, 0xbc, 0x60, 0xdd, 0x46,
			0x28, 0x9f, 0x89, 0x41, 0x3d, 0xe0,
			0x01, 0x5a, 0x5d, 0x3a, 0x9c, 0xa7,
			0x5f, 0x7f, 0xe1, 0x0b, 0x48, 0x0b,
			0xb4, 0x45, 0xf7, 0xd0, 0x93, 0x27,
			0xbc, 0xfb,
		]),
		right: new Buffer([
			0xc6, 0xad, 0x86, 0xec, 0x84, 0x30,
			0xe1, 0x3a, 0x3f, 0x4a, 0xfd, 0x24,
			0xdb, 0xf9, 0x26, 0x50, 0x1d, 0x5c,
			0xce, 0x87, 0x75, 0xb6, 0xeb, 0x60,
			0x62, 0x0b, 0x4d, 0x42, 0xdd, 0xc1,
			0x09, 0x12,
		]),
		result: new Buffer([
			0x11, 0x01, 0x3a, 0x8c, 0x59, 0x76,
			0xc9, 0xa5, 0xb6, 0x0b, 0xc0, 0xc4,
			0xda, 0xa3, 0x7b, 0x6a, 0x81, 0xfb,
			0x91, 0xf8, 0x94, 0xbd, 0xa3, 0x6b,
			0xd6, 0x4e, 0xba, 0x92, 0x4e, 0xe6,
			0xb5, 0xe9,
		])
	},
	{
		left: new Buffer([
			0xbc, 0x27, 0x09, 0x96, 0xbc, 0xee,
			0x0a, 0xd4, 0x20, 0x73, 0x48, 0x3f,
			0x4a, 0x41, 0x7c, 0x67, 0x41, 0xad,
			0x14, 0x23, 0x8d, 0xf5, 0x6c, 0x0d,
			0xc6, 0xf4, 0xda, 0xe8, 0x14, 0xe2,
			0xf6, 0xf7,
		]),
		right: new Buffer([
			0xc6, 0x53, 0x4a, 0x5d, 0xe1, 0x18,
			0x07, 0x15, 0xa2, 0x16, 0x94, 0xef,
			0x6f, 0x13, 0xf1, 0x44, 0xf7, 0xc6,
			0xf9, 0x53, 0x6d, 0xf6, 0xaa, 0x8f,
			0x71, 0x3b, 0xe6, 0x27, 0x58, 0x91,
			0xc3, 0xee,
		]),
		result: new Buffer([
			0x7a, 0x74, 0x43, 0xcb, 0x5d, 0xf6,
			0x0d, 0xc1, 0x82, 0x65, 0xdc, 0xd0,
			0x25, 0x52, 0x8d, 0x23, 0xb6, 0x6b,
			0xed, 0x70, 0xe0, 0x03, 0xc6, 0x82,
			0xb7, 0xcf, 0x3c, 0xcf, 0x4c, 0x73,
			0x35, 0x19,
		])
	}
];

describe('xor', () => {
	testData.forEach((test, i) => {
		it('should xor arrays properly #' + i, () => {
			expect(xor(test.left, test.right).equals(test.result)).toBe(true);
		});
	});
});
import {
	verify,
} from '../src/dancer';

const testData = [
	{
		key: new Buffer([
			0x95, 0xfa, 0xac, 0x5a, 0xd3, 0xa4, 0x20, 0xbc,
			0xa9, 0x21, 0xcf, 0xa1, 0x09, 0x93, 0x5f, 0x5d,
			0x0a, 0x9e, 0xe9, 0xe4, 0xa4, 0xb4, 0x53, 0xdd,
			0x7c, 0xf6, 0x3d, 0xe1, 0x6f, 0xcc, 0xef, 0x10,
		]),
		tag: new Buffer([
			0xf5, 0xd0, 0xd2, 0xb6, 0x6a, 0x00, 0xfe, 0x3b,
			0xc2, 0xf3, 0xe0, 0xc7, 0x14, 0x57, 0x7d, 0xa0,
		]),
		body: new Buffer([
			0x11, 0xda, 0x1d, 0x2a, 0xee, 0xef, 0x75, 0x8d,
			0xdb, 0x8b, 0xe7, 0x30, 0xc9, 0xdc, 0x4c, 0x5b,
			0x36, 0xeb, 0xf2, 0x57, 0x16, 0x31, 0x87, 0xa5,
			0x5c, 0x97, 0x88, 0xd0, 0x61, 0x2b, 0xe3, 0x59,
			0x96, 0x77, 0x51, 0xa7, 0x84, 0xf0, 0xd4, 0x27,
			0xf8, 0x40, 0xe5, 0x83, 0xaf, 0xec, 0x7a, 0xd6,
			0x79, 0xba, 0x16, 0xf1, 0x42, 0xe4, 0x2f, 0xb3,
			0x99, 0x3c, 0xf5, 0x36, 0x63, 0x75, 0xb7, 0x40,
		]),
	},
	{
		key: new Buffer([
			0x26, 0xfa, 0x5b, 0x53, 0x14, 0xc8, 0x83, 0x71,
			0xbb, 0xd7, 0xd3, 0x16, 0x6b, 0x38, 0xf0, 0x6a,
			0x86, 0x59, 0x9e, 0xc3, 0x97, 0x69, 0xa6, 0xf4,
			0x7d, 0x57, 0x7a, 0x14, 0x93, 0xc9, 0x91, 0x3b,
		]),
		tag: new Buffer([
			0x28, 0x5d, 0x99, 0xd6, 0x76, 0xad, 0x15, 0xda,
			0xf3, 0x99, 0x0b, 0xd6, 0x9f, 0x5e, 0xa0, 0x6b,
		]),
		body: new Buffer([
			0x50, 0x51, 0x26, 0xae, 0xdc, 0x4d, 0x1f, 0xd6,
			0x36, 0x20, 0x94, 0x5a, 0x1b, 0xfe, 0x8f, 0x15,
			0x6c, 0x64, 0x1e, 0x03, 0x0f, 0x05, 0x96, 0x63,
			0xc7, 0xa6, 0x73, 0xee, 0x49, 0xb9, 0x03, 0x41,
			0xf4, 0x3d, 0x25, 0x77, 0xaf, 0xd4, 0x4b, 0xcf,
			0x2f, 0xe0, 0xbc, 0x7b, 0xa4, 0xc1, 0x1f, 0x4e,
			0x1e, 0x4a, 0xc6, 0x66, 0xd2, 0x6b, 0x37, 0x5a,
			0xd8, 0x28, 0x34, 0x7c, 0xfb, 0xcc, 0xd4, 0x41,
		]),
	},
	{
		key: new Buffer([
			0x52, 0x8e, 0x40, 0xc7, 0xd2, 0x4c, 0x39, 0xae,
			0x4b, 0xfd, 0x40, 0x8a, 0x36, 0xdd, 0x6e, 0xe7,
			0x2f, 0x6c, 0xe5, 0x52, 0x27, 0x75, 0x6b, 0xee,
			0x61, 0x3d, 0x34, 0xef, 0x1e, 0xdc, 0xfb, 0x10,
		]),
		tag: new Buffer([
			0xf2, 0xfc, 0x30, 0x33, 0x54, 0xe8, 0xfd, 0x67,
			0xde, 0x26, 0x0a, 0x31, 0xd0, 0xad, 0xcd, 0xa4,
		]),
		body: new Buffer([
			0x6d, 0xe5, 0x9d, 0x59, 0x44, 0x31, 0x6f, 0xdb,
			0x9d, 0xd6, 0xe5, 0x63, 0x58, 0xa4, 0x7a, 0x97,
			0x05, 0xdc, 0xd2, 0x1e, 0x2e, 0xb6, 0x99, 0x4b,
			0xca, 0xe4, 0x52, 0x72, 0x25, 0x08, 0x9e, 0x36,
			0x4a, 0x2d, 0x3d, 0xda, 0x6b, 0x3b, 0x17, 0xcb,
			0xad, 0x13, 0x34, 0xd9, 0x41, 0xb6, 0x45, 0xba,
			0x4e, 0xa1, 0x0e, 0x93, 0x3d, 0x6d, 0x1a, 0x91,
			0x7f, 0x47, 0xea, 0x16, 0x0e, 0x62, 0x26, 0xb7,
		]),
	},
	{
		key: new Buffer([
			0xd3, 0x1d, 0x8c, 0xfe, 0xee, 0x36, 0xdc, 0xb0,
			0xb4, 0x37, 0x29, 0x65, 0xf5, 0x89, 0x6d, 0xb2,
			0xb2, 0x1d, 0xd9, 0x7f, 0x20, 0x2a, 0xc7, 0x5a,
			0xc9, 0xe4, 0xeb, 0x47, 0x88, 0xa5, 0x32, 0x84,
		]),
		tag: new Buffer([
			0x15, 0x55, 0x20, 0xcf, 0xb8, 0xea, 0x10, 0x93,
			0xe8, 0x3a, 0x51, 0x1b, 0xda, 0x64, 0x91, 0x47,
		]),
		body: new Buffer([
			0x44, 0x34, 0x3c, 0x70, 0xac, 0xcf, 0x39, 0x87,
			0x1a, 0x25, 0x02, 0x6c, 0xb8, 0x0c, 0xad, 0x97,
			0x58, 0x4f, 0x20, 0x5b, 0xd2, 0xd0, 0x12, 0xe5,
			0xb0, 0xf6, 0x3c, 0x8d, 0x40, 0x67, 0xc5, 0x76,
			0xde, 0x9c, 0x14, 0x62, 0x9c, 0xf0, 0x3f, 0xca,
			0x49, 0x20, 0x49, 0xfb, 0x56, 0x5c, 0x36, 0x4e,
			0xe9, 0x1a, 0x14, 0xf8, 0x04, 0xd2, 0x8e, 0x5c,
			0x8a, 0xb5, 0x0d, 0xe1, 0x26, 0xdf, 0xba, 0xc3,
		]),
	},
	{
		key: new Buffer([
			0x4f, 0x99, 0x8f, 0x93, 0x96, 0xab, 0xf2, 0x91,
			0x00, 0xf1, 0x15, 0x57, 0xea, 0x26, 0xea, 0x56,
			0x80, 0x9b, 0xfe, 0x35, 0x4c, 0x00, 0xd2, 0xf8,
			0xac, 0x33, 0x83, 0x8d, 0xba, 0xdb, 0xbc, 0x31,
		]),
		tag: new Buffer([
			0xa8, 0x9f, 0x43, 0x5e, 0xb7, 0xef, 0x35, 0xf2,
			0xd7, 0xba, 0xd5, 0x00, 0xa6, 0xed, 0x15, 0x1c,
		]),
		body: new Buffer([
			0x77, 0xed, 0xee, 0x3d, 0xfc, 0x36, 0x7d, 0xa6,
			0x4d, 0x51, 0xd4, 0x35, 0x36, 0xf8, 0xb6, 0xd3,
			0xdb, 0xf8, 0xaa, 0x41, 0xa5, 0xa7, 0xc3, 0x98,
			0x6d, 0x88, 0x6d, 0xb8, 0xd9, 0x9e, 0xa5, 0xa6,
			0x9f, 0x61, 0x56, 0x22, 0xaa, 0xa3, 0x2a, 0xd6,
			0x76, 0x6e, 0x10, 0x58, 0x96, 0xc1, 0x37, 0x56,
			0xdf, 0xe2, 0x0f, 0x9e, 0x3b, 0x36, 0x79, 0x06,
			0x6b, 0x8d, 0x57, 0x4f, 0x44, 0x66, 0xbd, 0xbf,
		]),
	},
];

describe('verifying abstracted single blocks', () => {
	testData.forEach((test, i) => {
		it('should work correctly for message #' + i, () => {
			verify(test.key, test.tag, test.body).then(() => {}).catch((error) => {
				expect(!!error).toBe(false);
			});
		});
	});
});

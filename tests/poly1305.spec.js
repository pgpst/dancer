import { Poly1305 } from '../src/crypto';

const testData = [
	{
		message: new Buffer([
			0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20,
			0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21,
		]),
		key: new Buffer([
			0x74, 0x68, 0x69, 0x73, 0x20, 0x69,
			0x73, 0x20, 0x33, 0x32, 0x2d, 0x62,
			0x79, 0x74, 0x65, 0x20, 0x6b, 0x65,
			0x79, 0x20, 0x66, 0x6f, 0x72, 0x20,
			0x50, 0x6f, 0x6c, 0x79, 0x31, 0x33,
			0x30, 0x35,
		]),
		tag: new Buffer([
			0xa6, 0xf7, 0x45, 0x00, 0x8f, 0x81,
			0xc9, 0x16, 0xa2, 0x0d, 0xcc, 0x74,
			0xee, 0xf2, 0xb2, 0xf0,
		])
	},
	{
		message: new Buffer(32),
		key: new Buffer([
			0x74, 0x68, 0x69, 0x73, 0x20, 0x69,
			0x73, 0x20, 0x33, 0x32, 0x2d, 0x62,
			0x79, 0x74, 0x65, 0x20, 0x6b, 0x65,
			0x79, 0x20, 0x66, 0x6f, 0x72, 0x20,
			0x50, 0x6f, 0x6c, 0x79, 0x31, 0x33,
			0x30, 0x35,
		]),
		tag: new Buffer([
			0x49, 0xec, 0x78, 0x09, 0x0e, 0x48,
			0x1e, 0xc6, 0xc2, 0x6b, 0x33, 0xb9,
			0x1c, 0xcc, 0x03, 0x07,
		])
	},
	{
		message: new Buffer(2007),
		key: new Buffer([
			0x74, 0x68, 0x69, 0x73, 0x20, 0x69,
			0x73, 0x20, 0x33, 0x32, 0x2d, 0x62,
			0x79, 0x74, 0x65, 0x20, 0x6b, 0x65,
			0x79, 0x20, 0x66, 0x6f, 0x72, 0x20,
			0x50, 0x6f, 0x6c, 0x79, 0x31, 0x33,
			0x30, 0x35,
		]),
		tag: new Buffer([
			0xda, 0x84, 0xbc, 0xab, 0x02, 0x67,
			0x6c, 0x38, 0xcd, 0xb0, 0x15, 0x60,
			0x42, 0x74, 0xc2, 0xaa,
		])
	},
	{
		message: new Buffer(32),
		key: new Buffer(32),
		tag: new Buffer(16)
	}
];

describe('Poly1305', () => {
	testData.forEach((test, i) => {
		it('should hash properly test #' + i, () => {
			const poly = new Poly1305(test.key);
			poly.update(test.message);
			const tag = poly.finish();
			expect(tag.equals(test.tag)).toBe(true);
		});
	});
});
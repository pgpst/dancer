{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dancer.min.js","webpack:///webpack/bootstrap d897101be6ab478feafd","webpack:///F:/src/github.com/pgpst/dancer/src/dancer.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/index.js","webpack:///F:/src/github.com/pgpst/dancer/src/crypto/chacha20.js","webpack:///F:/src/github.com/pgpst/dancer/src/crypto/index.js","webpack:///F:/src/github.com/pgpst/dancer/src/crypto/poly1305.js","webpack:///F:/src/github.com/pgpst/dancer/src/crypto/xor.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/base64-js/lib/b64.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/is-array/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_crypto","_methods","dancer","chacha20","poly1305","random","verify","decrypt","encrypt","window","Buffer","global","typedArraySupport","Bar","arr","Uint8Array","foo","constructor","subarray","byteLength","e","kMaxLength","TYPED_ARRAY_SUPPORT","arg","length","parent","undefined","fromNumber","fromString","arguments","fromObject","that","allocate","checked","i","string","encoding","write","object","isBuffer","fromBuffer","isArray","fromArray","TypeError","ArrayBuffer","buffer","fromTypedArray","fromArrayBuffer","fromArrayLike","fromJsonObject","copy","array","_augment","type","data","__proto__","prototype","_isBuffer","fromPool","poolSize","rootParent","RangeError","toString","SlowBuffer","subject","buf","len","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","Infinity","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","hexWrite","offset","Number","remaining","strLen","Error","parsed","parseInt","substr","isNaN","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","base64","fromByteArray","slice","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","push","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","String","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","j","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","n","units","leadSurrogate","charCodeAt","byteArray","hi","lo","toByteArray","src","dst","INSPECT_MAX_BYTES","b","compare","a","x","y","isEncoding","concat","list","pos","item","equals","inspect","match","join","indexOf","val","byteOffset","arrayIndexOf","foundIndex","get","console","log","readUInt8","set","v","writeUInt8","isFinite","swap","toJSON","Array","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt16LE","readUInt16BE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","read","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","target","targetStart","_set","fill","toArrayBuffer","BP","toLocaleString","_classCallCheck","instance","Constructor","rotate","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","constants","ChaCha20","nonce","input","Uint32Array","cachePos","output","d","quarterRound","dpos","cacheLen","makeBlock","_interopRequireDefault","obj","__esModule","default","_poly1305","_poly13052","Poly1305","_chacha20","_chacha202","_xor","_xor2","XOR","leftover","r","Uint16Array","h","pad","finished","t","want","mpos","blocks","mac","g","mask","f","lookup","decode","elt","code","PLUS","PLUS_URL_SAFE","SLASH","SLASH_URL_SAFE","NUMBER","UPPER","LOWER","b64ToByteArray","b64","L","l","tmp","placeHolders","charAt","Arr","uint8ToBase64","uint8","encode","num","tripletToBase64","temp","extraBytes","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","s","NaN","rt","abs","LN2"],"mappings":"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","file":"dancer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"calculator\"] = factory();\n\telse\n\t\troot[\"calculator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"calculator\"] = factory();\n\telse\n\t\troot[\"calculator\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\tvalue: true\n\t});\n\t\n\tvar _crypto = __webpack_require__(3);\n\t\n\tvar _methods = __webpack_require__(6);\n\t\n\t/*import {\r\n\t\tverify as verifyChunked,\r\n\t\tdecrypt as decryptChunked,\r\n\t\tencrypt as encryptChunked\r\n\t} from './chunked';*/\n\t\n\t// Prepare the dancer object\n\tvar dancer = {\n\t\tchacha20: _crypto.chacha20,\n\t\tpoly1305: _crypto.poly1305,\n\t\trandom: _crypto.random,\n\t\tverify: _methods.verify,\n\t\tdecrypt: _methods.decrypt,\n\t\tencrypt: _methods.encrypt\n\t};\n\t\n\t// Export it into the window scope\n\t/*\tverifyChunked,\r\n\t\tdecryptChunked,\r\n\t\tencryptChunked*/\n\tif (window && !window.dancer) {\n\t\twindow.dancer = dancer;\n\t}\n\t\n\texports['default'] = dancer;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t/* eslint-disable no-proto */\n\t\n\tvar base64 = __webpack_require__(7)\n\tvar ieee754 = __webpack_require__(8)\n\tvar isArray = __webpack_require__(9)\n\t\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\tBuffer.poolSize = 8192 // not used by this implementation\n\t\n\tvar rootParent = {}\n\t\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n\t *     on objects.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\t\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global.TYPED_ARRAY_SUPPORT\n\t  : typedArraySupport()\n\t\n\tfunction typedArraySupport () {\n\t  function Bar () {}\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.foo = function () { return 42 }\n\t    arr.constructor = Bar\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        arr.constructor === Bar && // constructor can be set\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\t\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\t\n\t/**\n\t * Class: Buffer\n\t * =============\n\t *\n\t * The Buffer constructor returns instances of `Uint8Array` that are augmented\n\t * with function properties for all the node `Buffer` API functions. We use\n\t * `Uint8Array` so that square bracket notation works as expected -- it returns\n\t * a single octet.\n\t *\n\t * By augmenting the instances, we can avoid modifying the `Uint8Array`\n\t * prototype.\n\t */\n\tfunction Buffer (arg) {\n\t  if (!(this instanceof Buffer)) {\n\t    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n\t    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n\t    return new Buffer(arg)\n\t  }\n\t\n\t  this.length = 0\n\t  this.parent = undefined\n\t\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    return fromNumber(this, arg)\n\t  }\n\t\n\t  // Slightly less common case.\n\t  if (typeof arg === 'string') {\n\t    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n\t  }\n\t\n\t  // Unusual.\n\t  return fromObject(this, arg)\n\t}\n\t\n\tfunction fromNumber (that, length) {\n\t  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < length; i++) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\t\n\t  // Assumption: byteLength() return value is always < kMaxLength.\n\t  var length = byteLength(string, encoding) | 0\n\t  that = allocate(that, length)\n\t\n\t  that.write(string, encoding)\n\t  return that\n\t}\n\t\n\tfunction fromObject (that, object) {\n\t  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\t\n\t  if (isArray(object)) return fromArray(that, object)\n\t\n\t  if (object == null) {\n\t    throw new TypeError('must start with number, buffer, array or string')\n\t  }\n\t\n\t  if (typeof ArrayBuffer !== 'undefined') {\n\t    if (object.buffer instanceof ArrayBuffer) {\n\t      return fromTypedArray(that, object)\n\t    }\n\t    if (object instanceof ArrayBuffer) {\n\t      return fromArrayBuffer(that, object)\n\t    }\n\t  }\n\t\n\t  if (object.length) return fromArrayLike(that, object)\n\t\n\t  return fromJsonObject(that, object)\n\t}\n\t\n\tfunction fromBuffer (that, buffer) {\n\t  var length = checked(buffer.length) | 0\n\t  that = allocate(that, length)\n\t  buffer.copy(that, 0, 0, length)\n\t  return that\n\t}\n\t\n\tfunction fromArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Duplicate of fromArray() to keep fromArray() monomorphic.\n\tfunction fromTypedArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  // Truncating the elements is probably not what people expect from typed\n\t  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n\t  // of the old Buffer constructor.\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayBuffer (that, array) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    array.byteLength\n\t    that = Buffer._augment(new Uint8Array(array))\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromTypedArray(that, new Uint8Array(array))\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayLike (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n\t// Returns a zero-length buffer for inputs that don't conform to the spec.\n\tfunction fromJsonObject (that, object) {\n\t  var array\n\t  var length = 0\n\t\n\t  if (object.type === 'Buffer' && isArray(object.data)) {\n\t    array = object.data\n\t    length = checked(array.length) | 0\n\t  }\n\t  that = allocate(that, length)\n\t\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tif (Buffer.TYPED_ARRAY_SUPPORT) {\n\t  Buffer.prototype.__proto__ = Uint8Array.prototype\n\t  Buffer.__proto__ = Uint8Array\n\t}\n\t\n\tfunction allocate (that, length) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = Buffer._augment(new Uint8Array(length))\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that.length = length\n\t    that._isBuffer = true\n\t  }\n\t\n\t  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n\t  if (fromPool) that.parent = rootParent\n\t\n\t  return that\n\t}\n\t\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\t\n\tfunction SlowBuffer (subject, encoding) {\n\t  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\t\n\t  var buf = new Buffer(subject, encoding)\n\t  delete buf.parent\n\t  return buf\n\t}\n\t\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\t\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\t\n\t  if (a === b) return 0\n\t\n\t  var x = a.length\n\t  var y = b.length\n\t\n\t  var i = 0\n\t  var len = Math.min(x, y)\n\t  while (i < len) {\n\t    if (a[i] !== b[i]) break\n\t\n\t    ++i\n\t  }\n\t\n\t  if (i !== len) {\n\t    x = a[i]\n\t    y = b[i]\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'raw':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\t\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\t\n\t  if (list.length === 0) {\n\t    return new Buffer(0)\n\t  }\n\t\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; i++) {\n\t      length += list[i].length\n\t    }\n\t  }\n\t\n\t  var buf = new Buffer(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; i++) {\n\t    var item = list[i]\n\t    item.copy(buf, pos)\n\t    pos += item.length\n\t  }\n\t  return buf\n\t}\n\t\n\tfunction byteLength (string, encoding) {\n\t  if (typeof string !== 'string') string = '' + string\n\t\n\t  var len = string.length\n\t  if (len === 0) return 0\n\t\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'binary':\n\t      // Deprecated\n\t      case 'raw':\n\t      case 'raws':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\t\n\t// pre-set for values that may exist in the future\n\tBuffer.prototype.length = undefined\n\tBuffer.prototype.parent = undefined\n\t\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\t\n\t  start = start | 0\n\t  end = end === undefined || end === Infinity ? this.length : end | 0\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t  if (start < 0) start = 0\n\t  if (end > this.length) end = this.length\n\t  if (end <= start) return ''\n\t\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\t\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\t\n\t      case 'binary':\n\t        return binarySlice(this, start, end)\n\t\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\t\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\t\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\t\n\tBuffer.prototype.compare = function compare (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return 0\n\t  return Buffer.compare(this, b)\n\t}\n\t\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n\t  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n\t  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n\t  byteOffset >>= 0\n\t\n\t  if (this.length === 0) return -1\n\t  if (byteOffset >= this.length) return -1\n\t\n\t  // Negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\t\n\t  if (typeof val === 'string') {\n\t    if (val.length === 0) return -1 // special case: looking for empty string always fails\n\t    return String.prototype.indexOf.call(this, val, byteOffset)\n\t  }\n\t  if (Buffer.isBuffer(val)) {\n\t    return arrayIndexOf(this, val, byteOffset)\n\t  }\n\t  if (typeof val === 'number') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n\t      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n\t    }\n\t    return arrayIndexOf(this, [ val ], byteOffset)\n\t  }\n\t\n\t  function arrayIndexOf (arr, val, byteOffset) {\n\t    var foundIndex = -1\n\t    for (var i = 0; byteOffset + i < arr.length; i++) {\n\t      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n\t      } else {\n\t        foundIndex = -1\n\t      }\n\t    }\n\t    return -1\n\t  }\n\t\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\t\n\t// `get` is deprecated\n\tBuffer.prototype.get = function get (offset) {\n\t  console.log('.get() is deprecated. Access using array indexes instead.')\n\t  return this.readUInt8(offset)\n\t}\n\t\n\t// `set` is deprecated\n\tBuffer.prototype.set = function set (v, offset) {\n\t  console.log('.set() is deprecated. Access using array indexes instead.')\n\t  return this.writeUInt8(v, offset)\n\t}\n\t\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\t\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\t\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; i++) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) throw new Error('Invalid hex string')\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\t\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction binaryWrite (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\t\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    var swap = encoding\n\t    encoding = offset\n\t    offset = length | 0\n\t    length = swap\n\t  }\n\t\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\t\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('attempt to write outside buffer bounds')\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\t\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\t\n\t      case 'binary':\n\t        return binaryWrite(this, string, offset, length)\n\t\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\t\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\t\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end)\n\t  var res = []\n\t\n\t  var i = start\n\t  while (i < end) {\n\t    var firstByte = buf[i]\n\t    var codePoint = null\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1\n\t\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\t\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1]\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          fourthByte = buf[i + 3]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t      }\n\t    }\n\t\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD\n\t      bytesPerSequence = 1\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t    }\n\t\n\t    res.push(codePoint)\n\t    i += bytesPerSequence\n\t  }\n\t\n\t  return decodeCodePointsArray(res)\n\t}\n\t\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\t\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\t\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = ''\n\t  var i = 0\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    )\n\t  }\n\t  return res\n\t}\n\t\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction binarySlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\t\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\t\n\t  var out = ''\n\t  for (var i = start; i < end; i++) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\t\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\t\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\t\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\t\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\t\n\t  if (end < start) end = start\n\t\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = Buffer._augment(this.subarray(start, end))\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; i++) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\t\n\t  if (newBuf.length) newBuf.parent = this.parent || this\n\t\n\t  return newBuf\n\t}\n\t\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\t\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\t\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\t\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\t\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\t\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\t\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\t\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\t\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\t\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\t\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t}\n\t\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t  if (offset < 0) throw new RangeError('index out of range')\n\t}\n\t\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\t\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\t\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\t\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\t\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\t\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\t\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\t\n\t  var len = end - start\n\t  var i\n\t\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; i--) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; i++) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    target._set(this.subarray(start, start + len), targetStart)\n\t  }\n\t\n\t  return len\n\t}\n\t\n\t// fill(value, start=0, end=buffer.length)\n\tBuffer.prototype.fill = function fill (value, start, end) {\n\t  if (!value) value = 0\n\t  if (!start) start = 0\n\t  if (!end) end = this.length\n\t\n\t  if (end < start) throw new RangeError('end < start')\n\t\n\t  // Fill 0 bytes; we're done\n\t  if (end === start) return\n\t  if (this.length === 0) return\n\t\n\t  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n\t  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\t\n\t  var i\n\t  if (typeof value === 'number') {\n\t    for (i = start; i < end; i++) {\n\t      this[i] = value\n\t    }\n\t  } else {\n\t    var bytes = utf8ToBytes(value.toString())\n\t    var len = bytes.length\n\t    for (i = start; i < end; i++) {\n\t      this[i] = bytes[i % len]\n\t    }\n\t  }\n\t\n\t  return this\n\t}\n\t\n\t/**\n\t * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n\t * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n\t */\n\tBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n\t  if (typeof Uint8Array !== 'undefined') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t      return (new Buffer(this)).buffer\n\t    } else {\n\t      var buf = new Uint8Array(this.length)\n\t      for (var i = 0, len = buf.length; i < len; i += 1) {\n\t        buf[i] = this[i]\n\t      }\n\t      return buf.buffer\n\t    }\n\t  } else {\n\t    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n\t  }\n\t}\n\t\n\t// HELPER FUNCTIONS\n\t// ================\n\t\n\tvar BP = Buffer.prototype\n\t\n\t/**\n\t * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n\t */\n\tBuffer._augment = function _augment (arr) {\n\t  arr.constructor = Buffer\n\t  arr._isBuffer = true\n\t\n\t  // save reference to original Uint8Array set method before overwriting\n\t  arr._set = arr.set\n\t\n\t  // deprecated\n\t  arr.get = BP.get\n\t  arr.set = BP.set\n\t\n\t  arr.write = BP.write\n\t  arr.toString = BP.toString\n\t  arr.toLocaleString = BP.toString\n\t  arr.toJSON = BP.toJSON\n\t  arr.equals = BP.equals\n\t  arr.compare = BP.compare\n\t  arr.indexOf = BP.indexOf\n\t  arr.copy = BP.copy\n\t  arr.slice = BP.slice\n\t  arr.readUIntLE = BP.readUIntLE\n\t  arr.readUIntBE = BP.readUIntBE\n\t  arr.readUInt8 = BP.readUInt8\n\t  arr.readUInt16LE = BP.readUInt16LE\n\t  arr.readUInt16BE = BP.readUInt16BE\n\t  arr.readUInt32LE = BP.readUInt32LE\n\t  arr.readUInt32BE = BP.readUInt32BE\n\t  arr.readIntLE = BP.readIntLE\n\t  arr.readIntBE = BP.readIntBE\n\t  arr.readInt8 = BP.readInt8\n\t  arr.readInt16LE = BP.readInt16LE\n\t  arr.readInt16BE = BP.readInt16BE\n\t  arr.readInt32LE = BP.readInt32LE\n\t  arr.readInt32BE = BP.readInt32BE\n\t  arr.readFloatLE = BP.readFloatLE\n\t  arr.readFloatBE = BP.readFloatBE\n\t  arr.readDoubleLE = BP.readDoubleLE\n\t  arr.readDoubleBE = BP.readDoubleBE\n\t  arr.writeUInt8 = BP.writeUInt8\n\t  arr.writeUIntLE = BP.writeUIntLE\n\t  arr.writeUIntBE = BP.writeUIntBE\n\t  arr.writeUInt16LE = BP.writeUInt16LE\n\t  arr.writeUInt16BE = BP.writeUInt16BE\n\t  arr.writeUInt32LE = BP.writeUInt32LE\n\t  arr.writeUInt32BE = BP.writeUInt32BE\n\t  arr.writeIntLE = BP.writeIntLE\n\t  arr.writeIntBE = BP.writeIntBE\n\t  arr.writeInt8 = BP.writeInt8\n\t  arr.writeInt16LE = BP.writeInt16LE\n\t  arr.writeInt16BE = BP.writeInt16BE\n\t  arr.writeInt32LE = BP.writeInt32LE\n\t  arr.writeInt32BE = BP.writeInt32BE\n\t  arr.writeFloatLE = BP.writeFloatLE\n\t  arr.writeFloatBE = BP.writeFloatBE\n\t  arr.writeDoubleLE = BP.writeDoubleLE\n\t  arr.writeDoubleBE = BP.writeDoubleBE\n\t  arr.fill = BP.fill\n\t  arr.inspect = BP.inspect\n\t  arr.toArrayBuffer = BP.toArrayBuffer\n\t\n\t  return arr\n\t}\n\t\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\t\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\t\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\t\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\t\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\t\n\t  for (var i = 0; i < length; i++) {\n\t    codePoint = string.charCodeAt(i)\n\t\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        }\n\t\n\t        // valid lead\n\t        leadSurrogate = codePoint\n\t\n\t        continue\n\t      }\n\t\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t        leadSurrogate = codePoint\n\t        continue\n\t      }\n\t\n\t      // valid surrogate pair\n\t      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t    }\n\t\n\t    leadSurrogate = null\n\t\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\t\n\t  return bytes\n\t}\n\t\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\t\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    if ((units -= 2) < 0) break\n\t\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\t\n\t  return byteArray\n\t}\n\t\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\t\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; i++) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, (function() { return this; }())))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {Object.defineProperty(exports, '__esModule', {\n\t\tvalue: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction rotate(v, c) {\n\t\treturn v << c | v >>> 32 - c;\n\t}\n\t\n\tvar constants = new Buffer('expand 32-byte k');\n\t\n\tvar ChaCha20 = (function () {\n\t\tfunction ChaCha20(key, nonce) {\n\t\t\t_classCallCheck(this, ChaCha20);\n\t\n\t\t\tthis.input = new Uint32Array(16);\n\t\n\t\t\t// https://tools.ietf.org/html/draft-irtf-cfrg-chacha20-poly1305-01#section-2.3\n\t\t\tthis.input[0] = constants.readUInt32LE(0);\n\t\t\tthis.input[1] = constants.readUInt32LE(4);\n\t\t\tthis.input[2] = constants.readUInt32LE(8);\n\t\t\tthis.input[3] = constants.readUInt32LE(12);\n\t\t\tthis.input[4] = key.readUInt32LE(0);\n\t\t\tthis.input[5] = key.readUInt32LE(4);\n\t\t\tthis.input[6] = key.readUInt32LE(8);\n\t\t\tthis.input[7] = key.readUInt32LE(12);\n\t\t\tthis.input[8] = key.readUInt32LE(16);\n\t\t\tthis.input[9] = key.readUInt32LE(20);\n\t\t\tthis.input[10] = key.readUInt32LE(24);\n\t\t\tthis.input[11] = key.readUInt32LE(28);\n\t\n\t\t\tthis.input[12] = 0;\n\t\n\t\t\tthis.input[13] = nonce.readUInt32LE(0);\n\t\t\tthis.input[14] = nonce.readUInt32LE(4);\n\t\t\tthis.input[15] = nonce.readUInt32LE(8);\n\t\n\t\t\tthis.cachePos = 64;\n\t\t\tthis.buffer = new Uint32Array(16);\n\t\t\tthis.output = new Buffer(64);\n\t\t}\n\t\n\t\t_createClass(ChaCha20, [{\n\t\t\tkey: 'quarterRound',\n\t\t\tvalue: function quarterRound(a, b, c, d) {\n\t\t\t\tvar x = this.buffer;\n\t\t\t\tx[a] += x[b];x[d] = rotate(x[d] ^ x[a], 16);\n\t\t\t\tx[c] += x[d];x[b] = rotate(x[b] ^ x[c], 12);\n\t\t\t\tx[a] += x[b];x[d] = rotate(x[d] ^ x[a], 8);\n\t\t\t\tx[c] += x[d];x[b] = rotate(x[b] ^ x[c], 7);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'makeBlock',\n\t\t\tvalue: function makeBlock(output, start) {\n\t\t\t\tvar i = -1;\n\t\t\t\t// copy input into working buffer\n\t\t\t\twhile (++i < 16) {\n\t\t\t\t\tthis.buffer[i] = this.input[i];\n\t\t\t\t}\n\t\t\t\ti = -1;\n\t\t\t\twhile (++i < 10) {\n\t\t\t\t\t// straight round\n\t\t\t\t\tthis.quarterRound(0, 4, 8, 12);\n\t\t\t\t\tthis.quarterRound(1, 5, 9, 13);\n\t\t\t\t\tthis.quarterRound(2, 6, 10, 14);\n\t\t\t\t\tthis.quarterRound(3, 7, 11, 15);\n\t\n\t\t\t\t\t// diaganle round\n\t\t\t\t\tthis.quarterRound(0, 5, 10, 15);\n\t\t\t\t\tthis.quarterRound(1, 6, 11, 12);\n\t\t\t\t\tthis.quarterRound(2, 7, 8, 13);\n\t\t\t\t\tthis.quarterRound(3, 4, 9, 14);\n\t\t\t\t}\n\t\t\t\ti = -1;\n\t\n\t\t\t\t// copy working buffer into output\n\t\t\t\twhile (++i < 16) {\n\t\t\t\t\tthis.buffer[i] += this.input[i];\n\t\t\t\t\toutput.writeUInt32LE(this.buffer[i], start);\n\t\t\t\t\tstart += 4;\n\t\t\t\t}\n\t\n\t\t\t\tthis.input[12]++;\n\t\t\t\tif (!this.input[12]) {\n\t\t\t\t\tthrow new Error('counter is exhausted');\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'getBytes',\n\t\t\tvalue: function getBytes(len) {\n\t\t\t\tvar dpos = 0;\n\t\t\t\tvar dst = new Buffer(len);\n\t\t\t\tvar cacheLen = 64 - this.cachePos;\n\t\t\t\tif (cacheLen) {\n\t\t\t\t\tif (cacheLen >= len) {\n\t\t\t\t\t\tthis.output.copy(dst, 0, this.cachePos, 64);\n\t\t\t\t\t\tthis.cachePos += len;\n\t\t\t\t\t\treturn dst;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.output.copy(dst, 0, this.cachePos, 64);\n\t\t\t\t\t\tlen -= cacheLen;\n\t\t\t\t\t\tdpos += cacheLen;\n\t\t\t\t\t\tthis.cachePos = 64;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (len > 0) {\n\t\t\t\t\tif (len <= 64) {\n\t\t\t\t\t\tthis.makeBlock(this.output, 0);\n\t\t\t\t\t\tthis.output.copy(dst, dpos, 0, len);\n\t\t\t\t\t\tif (len < 64) {\n\t\t\t\t\t\t\tthis.cachePos = len;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn dst;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.makeBlock(dst, dpos);\n\t\t\t\t\t}\n\t\t\t\t\tlen -= 64;\n\t\t\t\t\tdpos += 64;\n\t\t\t\t}\n\t\t\t\tthrow new Error('something bad happended');\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn ChaCha20;\n\t})();\n\t\n\texports['default'] = ChaCha20;\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _poly1305 = __webpack_require__(4);\n\t\n\tvar _poly13052 = _interopRequireDefault(_poly1305);\n\t\n\texports.Poly1305 = _poly13052['default'];\n\t\n\tvar _chacha20 = __webpack_require__(2);\n\t\n\tvar _chacha202 = _interopRequireDefault(_chacha20);\n\t\n\texports.ChaCha20 = _chacha202['default'];\n\t\n\tvar _xor = __webpack_require__(5);\n\t\n\tvar _xor2 = _interopRequireDefault(_xor);\n\t\n\texports.XOR = _xor2['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {Object.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Poly1305KeySize = 32;\n\tvar Poly1305TagSize = 16;\n\t\n\tvar Poly1305 = (function () {\n\t\tfunction Poly1305(key) {\n\t\t\t_classCallCheck(this, Poly1305);\n\t\n\t\t\tthis.buffer = new Buffer(16);\n\t\t\tthis.leftover = 0;\n\t\t\tthis.r = new Uint16Array(10);\n\t\t\tthis.h = new Uint16Array(10);\n\t\t\tthis.pad = new Uint16Array(8);\n\t\t\tthis.finished = 0;\n\t\n\t\t\tvar t = new Uint16Array(8),\n\t\t\t    i;\n\t\n\t\t\tfor (i = 8; i--;) t[i] = key.readUInt16LE(i * 2);\n\t\n\t\t\tthis.r[0] = t[0] & 0x1fff;\n\t\t\tthis.r[1] = (t[0] >>> 13 | t[1] << 3) & 0x1fff;\n\t\t\tthis.r[2] = (t[1] >>> 10 | t[2] << 6) & 0x1f03;\n\t\t\tthis.r[3] = (t[2] >>> 7 | t[3] << 9) & 0x1fff;\n\t\t\tthis.r[4] = (t[3] >>> 4 | t[4] << 12) & 0x00ff;\n\t\t\tthis.r[5] = t[4] >>> 1 & 0x1ffe;\n\t\t\tthis.r[6] = (t[4] >>> 14 | t[5] << 2) & 0x1fff;\n\t\t\tthis.r[7] = (t[5] >>> 11 | t[6] << 5) & 0x1f81;\n\t\t\tthis.r[8] = (t[6] >>> 8 | t[7] << 8) & 0x1fff;\n\t\t\tthis.r[9] = t[7] >>> 5 & 0x007f;\n\t\n\t\t\tfor (i = 8; i--;) {\n\t\t\t\tthis.h[i] = 0;\n\t\t\t\tthis.pad[i] = key.readUInt16LE(16 + 2 * i);\n\t\t\t}\n\t\n\t\t\tthis.h[8] = 0;\n\t\t\tthis.h[9] = 0;\n\t\t\tthis.leftover = 0;\n\t\t\tthis.finished = 0;\n\t\t}\n\t\n\t\t_createClass(Poly1305, [{\n\t\t\tkey: \"update\",\n\t\t\tvalue: function update(m) {\n\t\t\t\tvar bytes = m.length;\n\t\t\t\tvar want = 0,\n\t\t\t\t    i = 0,\n\t\t\t\t    mpos = 0;\n\t\n\t\t\t\tif (this.leftover) {\n\t\t\t\t\twant = 16 - this.leftover;\n\t\n\t\t\t\t\tif (want > bytes) want = bytes;\n\t\n\t\t\t\t\tfor (i = want; i--;) {\n\t\t\t\t\t\tthis.buffer[this.leftover + i] = m[i + mpos];\n\t\t\t\t\t}\n\t\n\t\t\t\t\tbytes -= want;\n\t\t\t\t\tmpos += want;\n\t\t\t\t\tthis.leftover += want;\n\t\n\t\t\t\t\tif (this.leftover < 16) return this;\n\t\n\t\t\t\t\tthis.blocks(this.buffer, 0, 16);\n\t\t\t\t\tthis.leftover = 0;\n\t\t\t\t}\n\t\n\t\t\t\tif (bytes >= 16) {\n\t\t\t\t\twant = bytes & ~(16 - 1);\n\t\t\t\t\tthis.blocks(m, mpos, want);\n\t\t\t\t\tmpos += want;\n\t\t\t\t\tbytes -= want;\n\t\t\t\t}\n\t\n\t\t\t\tif (bytes) {\n\t\t\t\t\tfor (i = bytes; i--;) {\n\t\t\t\t\t\tthis.buffer[this.leftover + i] = m[i + mpos];\n\t\t\t\t\t}\n\t\t\t\t\tthis.leftover += bytes;\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"finish\",\n\t\t\tvalue: function finish() {\n\t\t\t\tvar mac = new Buffer(16),\n\t\t\t\t    g = new Uint16Array(10),\n\t\t\t\t    c = 0,\n\t\t\t\t    mask = 0,\n\t\t\t\t    f = 0,\n\t\t\t\t    i = 0;\n\t\n\t\t\t\tif (this.leftover) {\n\t\t\t\t\ti = this.leftover;\n\t\t\t\t\tthis.buffer[i++] = 1;\n\t\n\t\t\t\t\tfor (; i < 16; i++) {\n\t\t\t\t\t\tthis.buffer[i] = 0;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.finished = 1;\n\t\t\t\t\tthis.blocks(this.buffer, 0, 16);\n\t\t\t\t}\n\t\n\t\t\t\tc = this.h[1] >>> 13;\n\t\t\t\tthis.h[1] &= 0x1fff;\n\t\t\t\tfor (i = 2; i < 10; i++) {\n\t\t\t\t\tthis.h[i] += c;\n\t\t\t\t\tc = this.h[i] >>> 13;\n\t\t\t\t\tthis.h[i] &= 0x1fff;\n\t\t\t\t}\n\t\t\t\tthis.h[0] += c * 5;\n\t\t\t\tc = this.h[0] >>> 13;\n\t\t\t\tthis.h[0] &= 0x1fff;\n\t\t\t\tthis.h[1] += c;\n\t\t\t\tc = this.h[1] >>> 13;\n\t\t\t\tthis.h[1] &= 0x1fff;\n\t\t\t\tthis.h[2] += c;\n\t\t\t\tg[0] = this.h[0] + 5;\n\t\t\t\tc = g[0] >>> 13;\n\t\t\t\tg[0] &= 0x1fff;\n\t\t\t\tfor (i = 1; i < 10; i++) {\n\t\t\t\t\tg[i] = this.h[i] + c;\n\t\t\t\t\tc = g[i] >>> 13;\n\t\t\t\t\tg[i] &= 0x1fff;\n\t\t\t\t}\n\t\t\t\tg[9] -= 1 << 13;\n\t\n\t\t\t\tmask = (g[9] >>> 15) - 1;\n\t\t\t\tfor (i = 10; i--;) g[i] &= mask;\n\t\t\t\tmask = ~mask;\n\t\t\t\tfor (i = 10; i--;) {\n\t\t\t\t\tthis.h[i] = this.h[i] & mask | g[i];\n\t\t\t\t}\n\t\n\t\t\t\tthis.h[0] = this.h[0] | this.h[1] << 13;\n\t\t\t\tthis.h[1] = this.h[1] >> 3 | this.h[2] << 10;\n\t\t\t\tthis.h[2] = this.h[2] >> 6 | this.h[3] << 7;\n\t\t\t\tthis.h[3] = this.h[3] >> 9 | this.h[4] << 4;\n\t\t\t\tthis.h[4] = this.h[4] >> 12 | this.h[5] << 1 | this.h[6] << 14;\n\t\t\t\tthis.h[5] = this.h[6] >> 2 | this.h[7] << 11;\n\t\t\t\tthis.h[6] = this.h[7] >> 5 | this.h[8] << 8;\n\t\t\t\tthis.h[7] = this.h[8] >> 8 | this.h[9] << 5;\n\t\n\t\t\t\tf = (this.h[0] & 0xffffffff) + this.pad[0];\n\t\t\t\tthis.h[0] = f;\n\t\t\t\tfor (i = 1; i < 8; i++) {\n\t\t\t\t\tf = (this.h[i] & 0xffffffff) + this.pad[i] + (f >>> 16);\n\t\t\t\t\tthis.h[i] = f;\n\t\t\t\t}\n\t\n\t\t\t\tfor (i = 8; i--;) {\n\t\t\t\t\tmac.writeUInt16LE(this.h[i], i * 2);\n\t\t\t\t\tthis.pad[i] = 0;\n\t\t\t\t}\n\t\n\t\t\t\tfor (i = 10; i--;) {\n\t\t\t\t\tthis.h[i] = 0;\n\t\t\t\t\tthis.r[i] = 0;\n\t\t\t\t}\n\t\n\t\t\t\treturn mac;\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Poly1305;\n\t})();\n\t\n\texports[\"default\"] = Poly1305;\n\t\n\tfunction U16TO8_LE(p, pos, v) {\n\t\tp[pos] = v;\n\t\tp[pos + 1] = v >>> 8;\n\t}\n\tmodule.exports = exports[\"default\"];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports[\"default\"] = XOR;\n\t\n\tfunction XOR(a, b) {\n\t\tvar r = new Uint8Array();\n\t\n\t\tfor (var i = 0; i < a.length; i++) {\n\t\t\tr.push(a[i] ^ b[i]);\n\t\t}\n\t\n\t\treturn r;\n\t}\n\t\n\tmodule.exports = exports[\"default\"];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\n\t;(function (exports) {\n\t\t'use strict';\n\t\n\t  var Arr = (typeof Uint8Array !== 'undefined')\n\t    ? Uint8Array\n\t    : Array\n\t\n\t\tvar PLUS   = '+'.charCodeAt(0)\n\t\tvar SLASH  = '/'.charCodeAt(0)\n\t\tvar NUMBER = '0'.charCodeAt(0)\n\t\tvar LOWER  = 'a'.charCodeAt(0)\n\t\tvar UPPER  = 'A'.charCodeAt(0)\n\t\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\t\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\t\n\t\tfunction decode (elt) {\n\t\t\tvar code = elt.charCodeAt(0)\n\t\t\tif (code === PLUS ||\n\t\t\t    code === PLUS_URL_SAFE)\n\t\t\t\treturn 62 // '+'\n\t\t\tif (code === SLASH ||\n\t\t\t    code === SLASH_URL_SAFE)\n\t\t\t\treturn 63 // '/'\n\t\t\tif (code < NUMBER)\n\t\t\t\treturn -1 //no match\n\t\t\tif (code < NUMBER + 10)\n\t\t\t\treturn code - NUMBER + 26 + 26\n\t\t\tif (code < UPPER + 26)\n\t\t\t\treturn code - UPPER\n\t\t\tif (code < LOWER + 26)\n\t\t\t\treturn code - LOWER + 26\n\t\t}\n\t\n\t\tfunction b64ToByteArray (b64) {\n\t\t\tvar i, j, l, tmp, placeHolders, arr\n\t\n\t\t\tif (b64.length % 4 > 0) {\n\t\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t\t}\n\t\n\t\t\t// the number of equal signs (place holders)\n\t\t\t// if there are two placeholders, than the two characters before it\n\t\t\t// represent one byte\n\t\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t\t// this is just a cheap hack to not do indexOf twice\n\t\t\tvar len = b64.length\n\t\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\t\n\t\t\t// base64 is 4/3 + up to two characters of the original data\n\t\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\t\n\t\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\t\n\t\t\tvar L = 0\n\t\n\t\t\tfunction push (v) {\n\t\t\t\tarr[L++] = v\n\t\t\t}\n\t\n\t\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\tif (placeHolders === 2) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t} else if (placeHolders === 1) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\treturn arr\n\t\t}\n\t\n\t\tfunction uint8ToBase64 (uint8) {\n\t\t\tvar i,\n\t\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\t\toutput = \"\",\n\t\t\t\ttemp, length\n\t\n\t\t\tfunction encode (num) {\n\t\t\t\treturn lookup.charAt(num)\n\t\t\t}\n\t\n\t\t\tfunction tripletToBase64 (num) {\n\t\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t\t}\n\t\n\t\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\t\toutput += tripletToBase64(temp)\n\t\t\t}\n\t\n\t\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\t\tswitch (extraBytes) {\n\t\t\t\tcase 1:\n\t\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\t\toutput += '=='\n\t\t\t\t\tbreak\n\t\t\t\tcase 2:\n\t\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\t\toutput += '='\n\t\t\t\t\tbreak\n\t\t\t}\n\t\n\t\t\treturn output\n\t\t}\n\t\n\t\texports.toByteArray = b64ToByteArray\n\t\texports.fromByteArray = uint8ToBase64\n\t}( false ? (this.base64js = {}) : exports))\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\t\n\t  i += d\n\t\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\t\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\t\n\t  value = Math.abs(value)\n\t\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\t\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\t\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\t\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\t\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\n\t/**\n\t * isArray\n\t */\n\t\n\tvar isArray = Array.isArray;\n\t\n\t/**\n\t * toString\n\t */\n\t\n\tvar str = Object.prototype.toString;\n\t\n\t/**\n\t * Whether or not the given `val`\n\t * is an array.\n\t *\n\t * example:\n\t *\n\t *        isArray([]);\n\t *        // > true\n\t *        isArray(arguments);\n\t *        // > false\n\t *        isArray('');\n\t *        // > false\n\t *\n\t * @param {mixed} val\n\t * @return {bool}\n\t */\n\t\n\tmodule.exports = isArray || function (val) {\n\t  return !! val && '[object Array]' == str.call(val);\n\t};\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** dancer.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d897101be6ab478feafd\n **/","import { chacha20, poly1305, random } from './crypto';\r\nimport { verify, decrypt, encrypt } from './methods';\r\n/*import {\r\n\tverify as verifyChunked,\r\n\tdecrypt as decryptChunked,\r\n\tencrypt as encryptChunked\r\n} from './chunked';*/\r\n\r\n// Prepare the dancer object\r\nconst dancer = {\r\n\tchacha20,\r\n\tpoly1305,\r\n\trandom,\r\n\tverify,\r\n\tdecrypt,\r\n\tencrypt,\r\n/*\tverifyChunked,\r\n\tdecryptChunked,\r\n\tencryptChunked*/\r\n};\r\n\r\n// Export it into the window scope\r\nif (window && !window.dancer) {\r\n\twindow.dancer = dancer;\r\n}\r\n\r\nexport default dancer;\n\n\n/** WEBPACK FOOTER **\n ** F:/src/github.com/pgpst/dancer/src/dancer.js\n **/","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n *     on objects.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  function Bar () {}\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    arr.constructor = Bar\n    return arr.foo() === 42 && // typed array instances can be augmented\n        arr.constructor === Bar && // constructor can be set\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  this.length = 0\n  this.parent = undefined\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    array.byteLength\n    that = Buffer._augment(new Uint8Array(array))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = Buffer._augment(new Uint8Array(length))\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n    that._isBuffer = true\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\n// `get` is deprecated\nBuffer.prototype.get = function get (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` is deprecated\nBuffer.prototype.set = function set (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), targetStart)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function _augment (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array set method before overwriting\n  arr._set = arr.set\n\n  // deprecated\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.indexOf = BP.indexOf\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/index.js\n ** module id = 1\n ** module chunks = 0\n **/","function rotate(v, c) {\r\n\treturn (v << c) | (v >>> (32 - c));\r\n}\r\n\r\nvar constants = new Buffer('expand 32-byte k');\r\n\r\nexport default class ChaCha20 {\r\n\tconstructor(key, nonce) {\r\n\t\tthis.input = new Uint32Array(16);\r\n\r\n\t\t// https://tools.ietf.org/html/draft-irtf-cfrg-chacha20-poly1305-01#section-2.3\r\n\t\tthis.input[0] = constants.readUInt32LE(0);\r\n\t\tthis.input[1] = constants.readUInt32LE(4);\r\n\t\tthis.input[2] = constants.readUInt32LE(8);\r\n\t\tthis.input[3] = constants.readUInt32LE(12);\r\n\t\tthis.input[4] = key.readUInt32LE(0);\r\n\t\tthis.input[5] = key.readUInt32LE(4);\r\n\t\tthis.input[6] = key.readUInt32LE(8);\r\n\t\tthis.input[7] = key.readUInt32LE(12);\r\n\t\tthis.input[8] = key.readUInt32LE(16);\r\n\t\tthis.input[9] = key.readUInt32LE(20);\r\n\t\tthis.input[10] = key.readUInt32LE(24);\r\n\t\tthis.input[11] = key.readUInt32LE(28);\r\n\r\n\t\tthis.input[12] = 0;\r\n\r\n\t\tthis.input[13] = nonce.readUInt32LE(0);\r\n\t\tthis.input[14] = nonce.readUInt32LE(4);\r\n\t\tthis.input[15] = nonce.readUInt32LE(8);\r\n\t\t\r\n\t\tthis.cachePos = 64;\r\n\t\tthis.buffer = new Uint32Array(16);\r\n\t\tthis.output = new Buffer(64);\r\n\t}\r\n\r\n\tquarterRound(a, b, c, d) {\r\n\t\tvar x = this.buffer;\r\n\t\tx[a] += x[b]; x[d] = rotate(x[d] ^ x[a], 16);\r\n\t\tx[c] += x[d]; x[b] = rotate(x[b] ^ x[c], 12);\r\n\t\tx[a] += x[b]; x[d] = rotate(x[d] ^ x[a],  8);\r\n\t\tx[c] += x[d]; x[b] = rotate(x[b] ^ x[c],  7);\r\n\t}\r\n\r\n\tmakeBlock(output, start) {\r\n\t\tvar i = -1;\r\n\t\t// copy input into working buffer\r\n\t\twhile (++i < 16) {\r\n\t\t\tthis.buffer[i] = this.input[i];\r\n\t\t}\r\n\t\ti = -1;\r\n\t\twhile (++i < 10) {\r\n\t\t\t// straight round\r\n\t\t\tthis.quarterRound(0, 4, 8,12);\r\n\t\t\tthis.quarterRound(1, 5, 9,13);\r\n\t\t\tthis.quarterRound(2, 6,10,14);\r\n\t\t\tthis.quarterRound(3, 7,11,15);\r\n\r\n\t\t\t// diaganle round\r\n\t\t\tthis.quarterRound(0, 5,10,15);\r\n\t\t\tthis.quarterRound(1, 6,11,12);\r\n\t\t\tthis.quarterRound(2, 7, 8,13);\r\n\t\t\tthis.quarterRound(3, 4, 9,14);\r\n\t\t}\r\n\t\ti = -1;\r\n\r\n\t\t// copy working buffer into output\r\n\t\twhile (++i < 16) {\r\n\t\t\tthis.buffer[i] += this.input[i];\r\n\t\t\toutput.writeUInt32LE(this.buffer[i], start);\r\n\t\t\tstart += 4;\r\n\t\t}\r\n\r\n\t\tthis.input[12]++;\r\n\t\tif (!this.input[12]) {\r\n\t\t\tthrow new Error('counter is exhausted');\r\n\t\t}\r\n\t}\r\n\r\n\tgetBytes(len) {\r\n\t\tvar dpos = 0;\r\n\t\tvar dst = new Buffer(len);\r\n\t\tvar cacheLen = 64 - this.cachePos;\r\n\t\tif (cacheLen) {\r\n\t\t\tif (cacheLen >= len) {\r\n\t\t\t\tthis.output.copy(dst, 0, this.cachePos, 64);\r\n\t\t\t\tthis.cachePos += len;\r\n\t\t\t\treturn dst;\r\n\t\t\t} else {\r\n\t\t\t\tthis.output.copy(dst, 0, this.cachePos, 64);\r\n\t\t\t\tlen -= cacheLen;\r\n\t\t\t\tdpos += cacheLen;\r\n\t\t\t\tthis.cachePos = 64;\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (len > 0 ) {\r\n\t\t\tif (len <= 64) {\r\n\t\t\t\tthis.makeBlock(this.output, 0);\r\n\t\t\t\tthis.output.copy(dst, dpos, 0, len);\r\n\t\t\t\tif (len < 64) {\r\n\t\t\t\t\tthis.cachePos = len;\r\n\t\t\t\t}\r\n\t\t\t\treturn dst;\r\n\t\t\t} else {\r\n\t\t\t\tthis.makeBlock(dst, dpos);\r\n\t\t\t}\r\n\t\t\tlen -= 64;\r\n\t\t\tdpos += 64;\r\n\t\t}\r\n\t\tthrow new Error('something bad happended');\r\n\t}\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** F:/src/github.com/pgpst/dancer/src/crypto/chacha20.js\n **/","export Poly1305 from './poly1305';\r\nexport ChaCha20 from './chacha20';\r\nexport XOR from './xor';\r\n\n\n\n/** WEBPACK FOOTER **\n ** F:/src/github.com/pgpst/dancer/src/crypto/index.js\n **/","const Poly1305KeySize = 32;\r\nconst Poly1305TagSize = 16;\r\n\r\nexport default class Poly1305 {\r\n\tconstructor(key) {\r\n\t\tthis.buffer = new Buffer(16);\r\n\t\tthis.leftover = 0;\r\n\t\tthis.r = new Uint16Array(10);\r\n\t\tthis.h = new Uint16Array(10);\r\n\t\tthis.pad = new Uint16Array(8);\r\n\t\tthis.finished = 0;\r\n\r\n\t\tvar t = new Uint16Array(8), i;\r\n\r\n\t\tfor (i = 8; i--;) t[i] = key.readUInt16LE(i*2);\r\n\r\n\t\tthis.r[0] =   t[0]                         & 0x1fff;\r\n\t\tthis.r[1] = ((t[0] >>> 13) | (t[1] <<  3)) & 0x1fff;\r\n\t\tthis.r[2] = ((t[1] >>> 10) | (t[2] <<  6)) & 0x1f03;\r\n\t\tthis.r[3] = ((t[2] >>>  7) | (t[3] <<  9)) & 0x1fff;\r\n\t\tthis.r[4] = ((t[3] >>>  4) | (t[4] << 12)) & 0x00ff;\r\n\t\tthis.r[5] =  (t[4] >>>  1)                 & 0x1ffe;\r\n\t\tthis.r[6] = ((t[4] >>> 14) | (t[5] <<  2)) & 0x1fff;\r\n\t\tthis.r[7] = ((t[5] >>> 11) | (t[6] <<  5)) & 0x1f81;\r\n\t\tthis.r[8] = ((t[6] >>>  8) | (t[7] <<  8)) & 0x1fff;\r\n\t\tthis.r[9] =  (t[7] >>>  5)                 & 0x007f;\r\n\r\n\t\tfor (i = 8; i--;) {\r\n\t\t\tthis.h[i]   = 0;\r\n\t\t\tthis.pad[i] = key.readUInt16LE( 16+(2*i));\r\n\t\t}\r\n\r\n\t\tthis.h[8] = 0;\r\n\t\tthis.h[9] = 0;\r\n\t\tthis.leftover = 0;\r\n\t\tthis.finished = 0;\r\n\t} \r\n\r\n\tupdate(m) {\r\n\t\tvar bytes = m.length;\r\n\t\tvar want = 0, i = 0, mpos = 0;\r\n\r\n\t\tif (this.leftover) {\r\n\t\t\twant = 16 - this.leftover;\r\n\r\n\t\t\tif (want > bytes)\r\n\t\t\t\twant = bytes;\r\n\r\n\t\t\tfor (i = want; i--;) {\r\n\t\t\t\tthis.buffer[this.leftover+i] = m[i+mpos];\r\n\t\t\t}\r\n\r\n\t\t\tbytes -= want;\r\n\t\t\tmpos += want;\r\n\t\t\tthis.leftover += want;\r\n\r\n\t\t\tif (this.leftover < 16)\r\n\t\t\t\treturn this;\r\n\r\n\t\t\tthis.blocks(this.buffer, 0, 16);\r\n\t\t\tthis.leftover = 0;\r\n\t\t}\r\n\r\n\t\tif (bytes >= 16) {\r\n\t\t\twant = (bytes & ~(16 - 1));\r\n\t\t\tthis.blocks(m, mpos, want);\r\n\t\t\tmpos += want;\r\n\t\t\tbytes -= want;\r\n\t\t}\r\n\r\n\t\tif (bytes) {\r\n\t\t\tfor (i = bytes; i--;) {\r\n\t\t\t\tthis.buffer[this.leftover+i] = m[i+mpos];\r\n\t\t\t}\r\n\t\t\tthis.leftover += bytes;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfinish() {\r\n\t\tvar mac = new Buffer(16),\r\n\t\t\tg = new Uint16Array(10),\r\n\t\t\tc = 0, mask = 0, f = 0, i = 0;\r\n\r\n\t\tif (this.leftover) {\r\n\t\t\ti = this.leftover;\r\n\t\t\tthis.buffer[i++] = 1;\r\n\r\n\t\t\tfor (; i < 16; i++) {\r\n\t\t\t\tthis.buffer[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.finished = 1;\r\n\t\t\tthis.blocks(this.buffer, 0, 16);\r\n\t\t}\r\n\r\n\t\tc = this.h[1] >>> 13;\r\n\t\tthis.h[1] &= 0x1fff;\r\n\t\tfor (i = 2; i < 10; i++) {\r\n\t\t\tthis.h[i] += c;\r\n\t\t\tc = this.h[i] >>> 13;\r\n\t\t\tthis.h[i] &= 0x1fff;\r\n\t\t}\r\n\t\tthis.h[0] += (c * 5);\r\n\t\tc = this.h[0] >>> 13;\r\n\t\tthis.h[0] &= 0x1fff;\r\n\t\tthis.h[1] += c;\r\n\t\tc = this.h[1] >>> 13;\r\n\t\tthis.h[1] &= 0x1fff;\r\n\t\tthis.h[2] += c;\r\n\t\tg[0] = this.h[0] + 5;\r\n\t\tc = g[0] >>> 13;\r\n\t\tg[0] &= 0x1fff;\r\n\t\tfor (i = 1; i < 10; i++) {\r\n\t\t\tg[i] = this.h[i] + c;\r\n\t\t\tc = g[i] >>> 13;\r\n\t\t\tg[i] &= 0x1fff;\r\n\t\t}\r\n\t\tg[9] -= (1 << 13);\r\n\r\n\t\tmask = (g[9] >>> 15) - 1;\r\n\t\tfor (i = 10; i--;) g[i] &= mask;\r\n\t\tmask = ~mask;\r\n\t\tfor (i = 10; i--;) {\r\n\t\t\tthis.h[i] = (this.h[i] & mask) | g[i];\r\n\t\t}\r\n\r\n\t\tthis.h[0] = (this.h[0]      ) | (this.h[1] << 13);\r\n\t\tthis.h[1] = (this.h[1] >>  3) | (this.h[2] << 10);\r\n\t\tthis.h[2] = (this.h[2] >>  6) | (this.h[3] <<  7);\r\n\t\tthis.h[3] = (this.h[3] >>  9) | (this.h[4] <<  4);\r\n\t\tthis.h[4] = (this.h[4] >> 12) | (this.h[5] <<  1) | (this.h[6] << 14);\r\n\t\tthis.h[5] = (this.h[6] >>  2) | (this.h[7] << 11);\r\n\t\tthis.h[6] = (this.h[7] >>  5) | (this.h[8] <<  8);\r\n\t\tthis.h[7] = (this.h[8] >>  8) | (this.h[9] <<  5);\r\n\r\n\t\tf = (this.h[0] & 0xffffffff) + this.pad[0];\r\n\t\tthis.h[0] = f;\r\n\t\tfor (i = 1; i < 8; i++) {\r\n\t\t\tf = (this.h[i] & 0xffffffff) + this.pad[i] + (f >>> 16);\r\n\t\t\tthis.h[i] = f;\r\n\t\t}\r\n\r\n\t\tfor (i = 8; i--;) {\r\n\t\t\tmac.writeUInt16LE(this.h[i], i*2);\r\n\t\t\tthis.pad[i] = 0;\r\n\t\t}\r\n\r\n\t\tfor (i = 10; i--;) {\r\n\t\t\tthis.h[i] = 0;\r\n\t\t\tthis.r[i] = 0;\r\n\t\t}\r\n\r\n\t\treturn mac;\r\n\t}\r\n}\r\n\r\nfunction U16TO8_LE(p, pos, v) {\r\n\tp[pos]   = v;\r\n\tp[pos+1] = v >>> 8;\r\n}\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** F:/src/github.com/pgpst/dancer/src/crypto/poly1305.js\n **/","export default function XOR(a, b) {\r\n\tconst r = new Uint8Array();\r\n\t\r\n\tfor (let i = 0; i < a.length; i++) {\r\n\t\tr.push(a[i] ^ b[i]);\r\n\t}\r\n\r\n\treturn r;\r\n}\n\n\n/** WEBPACK FOOTER **\n ** F:/src/github.com/pgpst/dancer/src/crypto/xor.js\n **/","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/base64-js/lib/b64.js\n ** module id = 7\n ** module chunks = 0\n **/","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js\n ** module id = 8\n ** module chunks = 0\n **/","\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/is-array/index.js\n ** module id = 9\n ** module chunks = 0\n **/"],"sourceRoot":""}